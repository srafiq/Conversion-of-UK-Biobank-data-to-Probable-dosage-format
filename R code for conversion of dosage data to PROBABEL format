#####R CODES########################
user<-""
setwd("")

library(data.table)
print(getwd())

foo <- Sys.getenv("PBS_ARRAY_INDEX")
####print(i)

####params <- commandArgs(trailingOnly = TRUE)

####args<-as.numeric(params)
#####typeof(args)
#####print(args)
library(data.table)

filename<-paste0("chrxx_",foo,".mldose")

filename2<-paste0("chrxx_ready",foo,".mldose")

dose<-fread(file=filename, h=F)

list_snps<-dose$V3
list_snps<-dose$V2
str(list_snps)
 
dose$V1<-NULL
dose$V2<-NULL
dose$V3<-NULL
dose$V4<-NULL
dose$V5<-NULL

     
dose2<-dose

dose2<-t(dose)
colnames(dose2)<-list_snps
 
 
###ped<-fread(file="", h=F)
###The ped file above was generated by extracting a single SNP. The purpose of the ped file is to extract the IDs for future analysis. 

ids<-ped$V1

dose3<-cbind(ids,dose2)

      
dim(dose3)
x<-1
index<-seq(x, 487408, 1)
###Above I have provided sequence length of 1 to 487408. Please use th sequence length for your study as required.
dose4<-cbind(index,dose3)
mldose<-replicate(487408, "MLDOSE")
arrow<-replicate(487408, "->")
dose5<-cbind(arrow, mldose, dose4)


moveme <- function (invec, movecommand) {
  movecommand <- lapply(strsplit(strsplit(movecommand, ";")[[1]], 
                                 ",|\\s+"), function(x) x[x != ""])
  movelist <- lapply(movecommand, function(x) {
    Where <- x[which(x %in% c("before", "after", "first", 
                              "last")):length(x)]
    ToMove <- setdiff(x, Where)
    list(ToMove, Where)
  })
  myVec <- invec
  for (i in seq_along(movelist)) {
    temp <- setdiff(myVec, movelist[[i]][[1]])
    A <- movelist[[i]][[2]][1]
    if (A %in% c("before", "after")) {
      ba <- movelist[[i]][[2]][2]
      if (A == "before") {
        after <- match(ba, temp) - 1
      }
      else if (A == "after") {
        after <- match(ba, temp)
      }
    }
    else if (A == "first") {
      after <- 0
    }
    else if (A == "last") {
      after <- length(myVec)
    }
    myVec <- append(temp, values = movelist[[i]][[1]], after = after)
  }
  myVec
}

 dose6<-moveme(names(dose5), "index first")

 library(dplyr)


 dose6<-as.data.frame(dose5)
 
 dosse6<-dose6[, c(3,1)]

 arrange.vars <- function(data, vars){
##stop if not a data.frame (but should work for matrices as well)
    stopifnot(is.data.frame(data))

##sort out inputs
    data.nms <- names(data)
    var.nr <- length(data.nms)
    var.nms <- names(vars)
    var.pos <- vars
##sanity checks
    stopifnot( !any(duplicated(var.nms)), 
               !any(duplicated(var.pos)) )
    stopifnot( is.character(var.nms), 
               is.numeric(var.pos) )
    stopifnot( all(var.nms %in% data.nms) )
    stopifnot( all(var.pos > 0), 
               all(var.pos <= var.nr) )

##prepare output
    out.vec <- character(var.nr)
    out.vec[var.pos] <- var.nms
    out.vec[-var.pos] <- data.nms[ !(data.nms %in% var.nms) ]
    stopifnot( length(out.vec)==var.nr )

##re-arrange vars by position
    data <- data[ , out.vec]
    return(data)
}

dose6<-arrange.vars(dose6, c("index"=1))
dose7<-arrange.vars(dose6, c("ids"=3))
 
dose8<-dose7

pheno<-fread(file="xxxxx.txt", header=T)
head(pheno)
      
pheno_prob_mi<-pheno
 
library(plyr)

colnames(pheno)[1]<-"ids"
         


merged<-merge(dose7, pheno, by="ids")
 


x<-1
index_new<-seq(x, 403235, 1)
merged_final<-cbind(index_new,merged)
merged <- mutate(merged_final, new1 = paste(index_new,arrow,ids,sep=""))
 final<-arrange.vars(merged, c("new1"=1))

final$index<-NULL
final$ids<-NULL
final$index.1<-NULL
final$arrow<-NULL
final$index_new<-NULL

final[, tail(colnames(final), 14)]<-NULL

names(final)<-NULL

setwd("")

write.table(final, file=filename2, col.names=F, row.names=F, quote=F)



filename2<-paste0("chr21_ready",foo,".info")

print(filename)

dose<-fread(file=filename, h=F)

mlinfo<-dose[,1:7]

mlinfo[mlinfo<1]<-1
write.table(mlinfo, file=filename2, col.names=T, row.names=F, quote=F)
